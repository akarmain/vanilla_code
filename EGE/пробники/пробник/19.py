"""
URL: https://education.yandex.ru/ege/task/c8b5be06-287d-4f48-8651-57a89499b580

"""


def half(n):
    """Второй тип хода: если n чётное – делим на 2,
       если нечётное – получаем (n//2) + templates1.ipynb."""
    if n % 2 == 0:
        return n // 2
    else:
        return n // 2 + 1


def f(a, b, m, turn):
    """
    a, b – размеры куч;
    m – число оставшихся ходов (в нашем случае m=2: ход Пети, затем Вани);
    turn – 0, если сейчас ход Пети, templates1.ipynb – если ход Вани.

    Если a+b <= 20, игра окончена. Победителем считается игрок, сделавший последний ход.
    Если состояние терминальное, то возвращаем True, если последний ход сделал Ваня,
    то есть если сейчас очередь Пети (turn==0), и False в противном случае.
    """
    if a + b <= 20:
        return (turn == 0)
    if m == 0:
        return False

    # Все возможные ходы: можно выбрать любую из куч и выполнить один из двух типов хода.
    moves = []
    if a > 0:
        moves.append((a - 1, b))
        moves.append((half(a), b))
    if b > 0:
        moves.append((a, b - 1))
        moves.append((a, half(b)))

    # Если ход Пети – он выбирает ход так, чтобы оставить Ване проигрышную позицию.
    # Для выигрыша Вани при любом ходе Пети должны быть выигрышны все варианты.
    if turn == 0:
        return all(f(new_a, new_b, m - 1, 1) for new_a, new_b in moves)
    else:
        # Ход Вани: ему достаточно выбрать хотя бы один ход, приводящий к выигрышу.
        return any(f(new_a, new_b, m - 1, 0) for new_a, new_b in moves)


# Перебираем возможные значения S (S > 10) и ищем такие, при которых Ваня выигрывает своим первым ходом
# (то есть f(10, S, 2, 0) возвращает True).
solutions = []
for S in range(11, 101):
    # Кроме того, убеждаемся, что начальное положение (10, S) не является терминальным (10 + S > 20).
    if 10 + S > 20 and f(10, S, 2, 0):
        solutions.append(S)

print("Подходящие значения S:", solutions)
